unit uProjetoDao;

interface

uses UDao,
  UProjeto,
  System.Contnrs,
  System.Generics.Collections;

type
  TProjetoDao = class( TDAO )
  public
    constructor Create;
    destructor Destroy;
    procedure Free;

    function Insert( var Value: TObject ): Boolean; Virtual;
    function Update( var Value: TObject ): Boolean; Virtual;
    function Delete( VID: Integer ): Boolean; Virtual;
    function Search( Key: string ): TObjectList; virtual;
    function LoadList: TObjectlist<TProjeto>; Virtual;
  end;

implementation

{ TProjetoDao }

constructor TProjetoDao.Create;
begin
  inherited;
end;

function TProjetoDao.Delete( VID: Integer ): Boolean;
begin

end;

destructor TProjetoDao.Destroy;
begin
  inherited;
end;

procedure TProjetoDao.Free;
begin
  if Assigned( Self ) then
    Self.Destroy;
end;

function TProjetoDao.Insert( var Value: TObject ): Boolean;
begin

end;

function TProjetoDao.LoadList: TObjectlist<TProjeto>;
var
  Arq: TextFile;
  Valor: Currency;
  Id: Integer;
  Nome: string;
  Projeto: TProjeto;
begin
  Assign( Arq, 'Projetos.Dat' );
  Reset( Arq );
  while ( not Eof( Arq ) ) do
  begin
    ReadLn( Arq, Id );
    ReadLn( Arq, Nome );
    ReadLn( Arq, Valor );

    Projeto       := TProjeto.Create;
    Projeto.Id    := Id;
    Projeto.Nome  := Nome;
    Projeto.Valor := Valor;
    Self.InsereFim( UmaCidade );
  end;
  Close( Arq );
end;

function TProjetoDao.Search( Key: string ): TObjectList;
begin

end;

function TProjetoDao.Update( var Value: TObject ): Boolean;
begin

end;

end.
